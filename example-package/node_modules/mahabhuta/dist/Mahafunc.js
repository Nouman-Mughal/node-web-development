"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mahafunc = void 0;
const _mahafunc_array = Symbol('array');
/**
 * A superclass for implementing processor functions
 * for use with Mahabhuta.  This class is not meant to
 * be instantiated directly, but to be extended.  Instead
 * it is meant for applications to instantiate subclasses
 * of this class.
 */
class Mahafunc {
    /**
     * Store the {@link MahafuncArray} containing
     * this function.
     */
    set array(array) { this[_mahafunc_array] = array; }
    /**
     * Retrieve the {@link MahafuncArray} containing
     * this function.
     */
    get array() { return this[_mahafunc_array]; }
    /**
     * Retrieve the options/configuration object
     * stored in the array containing this function.
     */
    get options() { return this[_mahafunc_array].options; }
    /**
     * Retrieve the jQuery-like _selector_ associated with
     * a Mahafunc.  When the containing {@link MahafuncArray}
     * determines whether to execute this function, it uses
     * the selector to determine if it matches any elements.
     *
     * @returns the selector to use
     */
    get selector() {
        throw new Error("The 'selector' getter must be overridden");
    }
    /**
     * Look for any elements matching the _selector_.
     *
     * @param $ The parsed HTML
     * @returns An array of elements matching the selector.  If none match, the array will have zero elements.
     */
    findElements($) {
        var ret = [];
        $(this.selector).each(function (i, elem) { ret.push(elem); });
        return ret;
    }
    /**
     * Run the function against an element.
     *
     * @param $element The element to process
     * @param metadata The metadata object passed from the application
     * @param setDirty The function to call if an element inserts code requiring further processing
     * @param done Callback function if needed
     */
    async process($element, metadata, setDirty, done) {
        throw new Error("The 'process' function must be overridden");
    }
    /**
     * Call {@link process} for every matching element.
     * The {@link findElements} function is meant to be
     * used to determine the matching elements.
     *
     * @param $ The parsed version of the HTML
     * @param metadata The metadata object passed from the application
     * @param setDirty The function to call if an element inserts code requiring further processing
     */
    async processAll($, metadata, setDirty) {
        throw new Error("The 'processAll' function must be overridden");
    }
}
exports.Mahafunc = Mahafunc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFoYWZ1bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvTWFoYWZ1bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXhDOzs7Ozs7R0FNRztBQUNILE1BQWEsUUFBUTtJQUVqQjs7O09BR0c7SUFDSCxJQUFJLEtBQUssQ0FBQyxLQUFvQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRWxFOzs7T0FHRztJQUNILElBQUksS0FBSyxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3Qzs7O09BR0c7SUFDSCxJQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXZEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLFFBQVE7UUFDUixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsWUFBWSxDQUFDLENBQUM7UUFDVixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBRSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBa0IsRUFBRSxJQUFlO1FBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBa0I7UUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Q0FDSjtBQXBFRCw0QkFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE1haGFmdW5jQXJyYXkgfSBmcm9tIFwiLi9NYWhhZnVuY0FycmF5XCI7XG5cbmNvbnN0IF9tYWhhZnVuY19hcnJheSA9IFN5bWJvbCgnYXJyYXknKTtcblxuLyoqXG4gKiBBIHN1cGVyY2xhc3MgZm9yIGltcGxlbWVudGluZyBwcm9jZXNzb3IgZnVuY3Rpb25zXG4gKiBmb3IgdXNlIHdpdGggTWFoYWJodXRhLiAgVGhpcyBjbGFzcyBpcyBub3QgbWVhbnQgdG9cbiAqIGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseSwgYnV0IHRvIGJlIGV4dGVuZGVkLiAgSW5zdGVhZFxuICogaXQgaXMgbWVhbnQgZm9yIGFwcGxpY2F0aW9ucyB0byBpbnN0YW50aWF0ZSBzdWJjbGFzc2VzXG4gKiBvZiB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTWFoYWZ1bmMge1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgdGhlIHtAbGluayBNYWhhZnVuY0FycmF5fSBjb250YWluaW5nXG4gICAgICogdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzZXQgYXJyYXkoYXJyYXk6IE1haGFmdW5jQXJyYXkpIHsgdGhpc1tfbWFoYWZ1bmNfYXJyYXldID0gYXJyYXk7IH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSB7QGxpbmsgTWFoYWZ1bmNBcnJheX0gY29udGFpbmluZ1xuICAgICAqIHRoaXMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGFycmF5KCkgeyByZXR1cm4gdGhpc1tfbWFoYWZ1bmNfYXJyYXldOyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgb3B0aW9ucy9jb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIHN0b3JlZCBpbiB0aGUgYXJyYXkgY29udGFpbmluZyB0aGlzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGdldCBvcHRpb25zKCkgeyByZXR1cm4gdGhpc1tfbWFoYWZ1bmNfYXJyYXldLm9wdGlvbnM7IH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBqUXVlcnktbGlrZSBfc2VsZWN0b3JfIGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIGEgTWFoYWZ1bmMuICBXaGVuIHRoZSBjb250YWluaW5nIHtAbGluayBNYWhhZnVuY0FycmF5fVxuICAgICAqIGRldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIHRoaXMgZnVuY3Rpb24sIGl0IHVzZXNcbiAgICAgKiB0aGUgc2VsZWN0b3IgdG8gZGV0ZXJtaW5lIGlmIGl0IG1hdGNoZXMgYW55IGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIHRoZSBzZWxlY3RvciB0byB1c2VcbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0b3IoKTogc3RyaW5nIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdzZWxlY3RvcicgZ2V0dGVyIG11c3QgYmUgb3ZlcnJpZGRlblwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29rIGZvciBhbnkgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIF9zZWxlY3Rvcl8uXG4gICAgICogXG4gICAgICogQHBhcmFtICQgVGhlIHBhcnNlZCBIVE1MXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yLiAgSWYgbm9uZSBtYXRjaCwgdGhlIGFycmF5IHdpbGwgaGF2ZSB6ZXJvIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZpbmRFbGVtZW50cygkKSB7XG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgJCh0aGlzLnNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uKGksIGVsZW0pIHsgcmV0LnB1c2goZWxlbSk7IH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biB0aGUgZnVuY3Rpb24gYWdhaW5zdCBhbiBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSAkZWxlbWVudCBUaGUgZWxlbWVudCB0byBwcm9jZXNzXG4gICAgICogQHBhcmFtIG1ldGFkYXRhIFRoZSBtZXRhZGF0YSBvYmplY3QgcGFzc2VkIGZyb20gdGhlIGFwcGxpY2F0aW9uXG4gICAgICogQHBhcmFtIHNldERpcnR5IFRoZSBmdW5jdGlvbiB0byBjYWxsIGlmIGFuIGVsZW1lbnQgaW5zZXJ0cyBjb2RlIHJlcXVpcmluZyBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgICAgKiBAcGFyYW0gZG9uZSBDYWxsYmFjayBmdW5jdGlvbiBpZiBuZWVkZWRcbiAgICAgKi9cbiAgICBhc3luYyBwcm9jZXNzKCRlbGVtZW50LCBtZXRhZGF0YSwgc2V0RGlydHk6IEZ1bmN0aW9uLCBkb25lPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdwcm9jZXNzJyBmdW5jdGlvbiBtdXN0IGJlIG92ZXJyaWRkZW5cIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCB7QGxpbmsgcHJvY2Vzc30gZm9yIGV2ZXJ5IG1hdGNoaW5nIGVsZW1lbnQuXG4gICAgICogVGhlIHtAbGluayBmaW5kRWxlbWVudHN9IGZ1bmN0aW9uIGlzIG1lYW50IHRvIGJlXG4gICAgICogdXNlZCB0byBkZXRlcm1pbmUgdGhlIG1hdGNoaW5nIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSAkIFRoZSBwYXJzZWQgdmVyc2lvbiBvZiB0aGUgSFRNTFxuICAgICAqIEBwYXJhbSBtZXRhZGF0YSBUaGUgbWV0YWRhdGEgb2JqZWN0IHBhc3NlZCBmcm9tIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIEBwYXJhbSBzZXREaXJ0eSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBpZiBhbiBlbGVtZW50IGluc2VydHMgY29kZSByZXF1aXJpbmcgZnVydGhlciBwcm9jZXNzaW5nXG4gICAgICovXG4gICAgYXN5bmMgcHJvY2Vzc0FsbCgkLCBtZXRhZGF0YSwgc2V0RGlydHk6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAncHJvY2Vzc0FsbCcgZnVuY3Rpb24gbXVzdCBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cbn1cbiJdfQ==