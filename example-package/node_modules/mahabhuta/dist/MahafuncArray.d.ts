import { Mahafunc } from './Mahafunc';
export declare type MahafuncType = Mahafunc | MahafuncArray | Function | [];
/**
 * Holds a series of functions ({@link Mahafunc}) that
 * will execute in the order they were added.
 */
export declare class MahafuncArray {
    constructor(name: string, config: Object);
    /**
     * Retrieve the configuration object supplied
     * to the array.
     */
    get options(): any;
    /**
     * Retrieve the name for the array.  This name is
     * purely for informational purposes.
     */
    get name(): any;
    /**
     * Retrieve the array of functions.
     */
    get functions(): any;
    /**
     * Retrieve the array of _final_ functions.  These are
     * executed after the main array is fully finished.
     */
    get final_functions(): any;
    /**
     * Return the number of elements in the function array.
     */
    get length(): number;
    /**
     * Return the number of elements in
     * the final function array.
     */
    get length_final(): number;
    /**
     * Add a function to the array.
     *
     * For historical purposes we support several types
     * of function.  It's preferable to use {@link Mahafunc}
     * objects, or other {@link MahafuncArray}'s.  But we
     * also allow bare functions.
     *
     * @param func A single item of type {@link MahafuncType}
     * @returns To support chaining, the array is returned
     */
    addMahafunc(func: MahafuncType): MahafuncArray;
    /**
     * Replace any existing function array with a
     * new array of either {@link Mahafunc} or
     * {@link MahafuncArray} objects
     *
     * @param functions
     * @returns To support chaining, the array is returned
     */
    setMahafuncArray(functions: Array<Mahafunc | MahafuncArray>): MahafuncArray;
    /**
     * Replace any existing final function array with a
     * new array of either {@link Mahafunc} or
     * {@link MahafuncArray} objects
     *
     * @param functions
     * @returns To support chaining, the array is returned
     */
    setFinalMahafuncArray(final_functions: Array<Mahafunc>): MahafuncArray;
    /**
     * Add a function to the array.
     *
     * For historical purposes we support several types
     * of function.  It's preferable to use {@link Mahafunc}
     * objects, or other {@link MahafuncArray}'s.  But we
     * also allow bare functions.
     *
     * @param func A single item of type {@link MahafuncType}
     * @returns To support chaining, the array is returned
     */
    addFinalMahafunc(func: MahafuncType): MahafuncArray;
    /**
     * Execute the functions in the array.
     *
     * @param $ The parsed form of the HTML ready to use with Cheerio functions
     * @param metadata A metadata object supplied by the application, and passed through to functions.
     * @param dirty A function provided by {@link processAsync} that notifies whether a function has inserted something in the HTML which requires further processing.
     * @returns
     */
    process($: any, metadata: any, dirty: Function): Promise<any[]>;
}
//# sourceMappingURL=MahafuncArray.d.ts.map