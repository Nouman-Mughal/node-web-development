"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomElement = void 0;
const Mahafunc_1 = require("./Mahafunc");
const util = __importStar(require("util"));
const index_1 = require("./index");
/**
 * Implements an HTML-ish element that is replaced with
 * some other HTML.  For example, <embed-video> might take
 * an href= and other attributes to describe a video from
 * a known service, the process function discerns the HTML code
 * to use for the player, rendering that into the output.
 */
class CustomElement extends Mahafunc_1.Mahafunc {
    /**
     * The name of the element that is implemented by
     * this function.
     */
    get elementName() {
        throw new Error("The 'elementName' getter must be overridden");
    }
    /**
     * The selector for a _CustomElement_ implementation
     * is simply the name of the element.
     */
    get selector() { return this.elementName; }
    async process($element, metadata, setDirty, done) {
        throw new Error("The 'process' function must be overridden");
    }
    async processAll($, metadata, setDirty) {
        try {
            let elements = this.findElements($);
            if (elements.length <= 0)
                return;
            // Performance testing
            const _start = new Date();
            for (let element of elements) {
                let replaceWith = await this.process($(element), metadata, setDirty);
                // console.log(`CustomElement ${this.elementName} process returned ${replaceWith}`);
                $(element).replaceWith(replaceWith);
            }
            /* if (this.elementName === "site-verification") {
                console.log(`CustomElement ${this.elementName} `, $.html());
            } */
            // Performance testing
            (0, index_1.logPerformance)(_start, `CustomElement ${this.array.name} ${this.elementName}`);
        }
        catch (e) {
            console.error(`CustomElement ${this.elementName} Errored with ${util.inspect(e)}`);
            throw e;
        }
    }
}
exports.CustomElement = CustomElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9DdXN0b21FbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBc0M7QUFDdEMsMkNBQTZCO0FBQzdCLG1DQUF3RDtBQUV4RDs7Ozs7O0dBTUc7QUFDRixNQUFhLGFBQWMsU0FBUSxtQkFBUTtJQUV4Qzs7O09BR0c7SUFDSCxJQUFJLFdBQVc7UUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksUUFBUSxLQUFhLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFbkQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQWtCLEVBQUUsSUFBZTtRQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFrQjtRQUM1QyxJQUFJO1lBQ0EsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQztnQkFBRSxPQUFPO1lBQ2pDLHNCQUFzQjtZQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBRTFCLEtBQUssSUFBSSxPQUFPLElBQUksUUFBUSxFQUFFO2dCQUMxQixJQUFJLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDckUsb0ZBQW9GO2dCQUNwRixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0Q7O2dCQUVJO1lBQ0osc0JBQXNCO1lBQ3RCLElBQUEsc0JBQWMsRUFBQyxNQUFNLEVBQUUsaUJBQWlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ2xGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixJQUFJLENBQUMsV0FBVyxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkYsTUFBTSxDQUFDLENBQUM7U0FDWDtJQUNMLENBQUM7Q0FDSjtBQTFDQSxzQ0EwQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE1haGFmdW5jIH0gZnJvbSBcIi4vTWFoYWZ1bmNcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBsb2dQcm9jZXNzaW5nLCBsb2dQZXJmb3JtYW5jZSB9IGZyb20gJy4vaW5kZXgnO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gSFRNTC1pc2ggZWxlbWVudCB0aGF0IGlzIHJlcGxhY2VkIHdpdGhcbiAqIHNvbWUgb3RoZXIgSFRNTC4gIEZvciBleGFtcGxlLCA8ZW1iZWQtdmlkZW8+IG1pZ2h0IHRha2VcbiAqIGFuIGhyZWY9IGFuZCBvdGhlciBhdHRyaWJ1dGVzIHRvIGRlc2NyaWJlIGEgdmlkZW8gZnJvbVxuICogYSBrbm93biBzZXJ2aWNlLCB0aGUgcHJvY2VzcyBmdW5jdGlvbiBkaXNjZXJucyB0aGUgSFRNTCBjb2RlXG4gKiB0byB1c2UgZm9yIHRoZSBwbGF5ZXIsIHJlbmRlcmluZyB0aGF0IGludG8gdGhlIG91dHB1dC5cbiAqL1xuIGV4cG9ydCBjbGFzcyBDdXN0b21FbGVtZW50IGV4dGVuZHMgTWFoYWZ1bmMge1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgdGhhdCBpcyBpbXBsZW1lbnRlZCBieVxuICAgICAqIHRoaXMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGVsZW1lbnROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnZWxlbWVudE5hbWUnIGdldHRlciBtdXN0IGJlIG92ZXJyaWRkZW5cIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdG9yIGZvciBhIF9DdXN0b21FbGVtZW50XyBpbXBsZW1lbnRhdGlvblxuICAgICAqIGlzIHNpbXBseSB0aGUgbmFtZSBvZiB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0b3IoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuZWxlbWVudE5hbWU7IH1cblxuICAgIGFzeW5jIHByb2Nlc3MoJGVsZW1lbnQsIG1ldGFkYXRhLCBzZXREaXJ0eTogRnVuY3Rpb24sIGRvbmU/OiBGdW5jdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ3Byb2Nlc3MnIGZ1bmN0aW9uIG11c3QgYmUgb3ZlcnJpZGRlblwiKTtcbiAgICB9XG5cbiAgICBhc3luYyBwcm9jZXNzQWxsKCQsIG1ldGFkYXRhLCBzZXREaXJ0eTogRnVuY3Rpb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50cyA9IHRoaXMuZmluZEVsZW1lbnRzKCQpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA8PSAwKSByZXR1cm47XG4gICAgICAgICAgICAvLyBQZXJmb3JtYW5jZSB0ZXN0aW5nXG4gICAgICAgICAgICBjb25zdCBfc3RhcnQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VXaXRoID0gYXdhaXQgdGhpcy5wcm9jZXNzKCQoZWxlbWVudCksIG1ldGFkYXRhLCBzZXREaXJ0eSk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYEN1c3RvbUVsZW1lbnQgJHt0aGlzLmVsZW1lbnROYW1lfSBwcm9jZXNzIHJldHVybmVkICR7cmVwbGFjZVdpdGh9YCk7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5yZXBsYWNlV2l0aChyZXBsYWNlV2l0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBpZiAodGhpcy5lbGVtZW50TmFtZSA9PT0gXCJzaXRlLXZlcmlmaWNhdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEN1c3RvbUVsZW1lbnQgJHt0aGlzLmVsZW1lbnROYW1lfSBgLCAkLmh0bWwoKSk7XG4gICAgICAgICAgICB9ICovXG4gICAgICAgICAgICAvLyBQZXJmb3JtYW5jZSB0ZXN0aW5nXG4gICAgICAgICAgICBsb2dQZXJmb3JtYW5jZShfc3RhcnQsIGBDdXN0b21FbGVtZW50ICR7dGhpcy5hcnJheS5uYW1lfSAke3RoaXMuZWxlbWVudE5hbWV9YCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEN1c3RvbUVsZW1lbnQgJHt0aGlzLmVsZW1lbnROYW1lfSBFcnJvcmVkIHdpdGggJHt1dGlsLmluc3BlY3QoZSl9YCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19