/**
 * Copyright 2014-2019 David Herron
 *
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.process1 = exports.processAsync = exports.process = exports.parse = exports.logPerformance = exports.logProcessing = exports.setTracePerformance = exports.setTraceProcessing = exports.config = exports.PageProcessor = exports.Munger = exports.MahafuncArray = exports.ElementTweaker = exports.CustomElement = exports.Mahafunc = void 0;
const cheerio = __importStar(require("cheerio"));
var Mahafunc_1 = require("./Mahafunc");
Object.defineProperty(exports, "Mahafunc", { enumerable: true, get: function () { return Mahafunc_1.Mahafunc; } });
var CustomElement_1 = require("./CustomElement");
Object.defineProperty(exports, "CustomElement", { enumerable: true, get: function () { return CustomElement_1.CustomElement; } });
var ElementTweaker_1 = require("./ElementTweaker");
Object.defineProperty(exports, "ElementTweaker", { enumerable: true, get: function () { return ElementTweaker_1.ElementTweaker; } });
var MahafuncArray_1 = require("./MahafuncArray");
Object.defineProperty(exports, "MahafuncArray", { enumerable: true, get: function () { return MahafuncArray_1.MahafuncArray; } });
var Munger_1 = require("./Munger");
Object.defineProperty(exports, "Munger", { enumerable: true, get: function () { return Munger_1.Munger; } });
var PageProcessor_1 = require("./PageProcessor");
Object.defineProperty(exports, "PageProcessor", { enumerable: true, get: function () { return PageProcessor_1.PageProcessor; } });
const MahafuncArray_2 = require("./MahafuncArray");
let configCheerio;
let traceFlag = false;
let tracePerf = false;
/**
 * Set the Cheerio configuration.
 * @param _configCheerio Object corresponding to Cheerio documentation
 * @see {@link https://www.npmjs.com/package/cheerio} for Cheerio documentation
 */
function config(_configCheerio) {
    configCheerio = _configCheerio;
}
exports.config = config;
/**
 * Enable or disable "processing" tracing.  Controls whether `logProcessing` does anything.
 * @param _traceFlag
 */
function setTraceProcessing(_traceFlag) {
    traceFlag = _traceFlag;
}
exports.setTraceProcessing = setTraceProcessing;
/**
 * Enable or disable "performance" tracing.
 * @param _traceFlag
 */
function setTracePerformance(_traceFlag) {
    tracePerf = _traceFlag;
}
exports.setTracePerformance = setTracePerformance;
/**
 * Perform "processing" tracing, if enabled.
 * @param text
 * @returns
 */
function logProcessing(text) {
    if (!traceFlag)
        return;
    console.log(text);
}
exports.logProcessing = logProcessing;
/**
 * Perform "performance" tracing, if enabled.
 * @param start
 * @param text
 * @returns
 */
function logPerformance(start, text) {
    if (!tracePerf)
        return;
    // https://stackoverflow.com/questions/14980014/how-can-i-calculate-the-time-between-2-dates-in-typescript
    console.log(`${text} ${(new Date().getTime() - start.getTime()) / 1000} seconds`);
}
exports.logPerformance = logPerformance;
/**
 * Parse the supplied text using Cheerio.   If a Cheerio Config
 * has been set, it will be used.
 *
 * @param text The HTML text to parse
 * @returns The object returned by Cheerio
 */
function parse(text) {
    return configCheerio
        ? cheerio.load(text, configCheerio)
        : cheerio.load(text);
}
exports.parse = parse;
;
/**
 * Process an array of functions against HTML text.  This
 * function supports both Promise/async and Callback execution.
 * It uses {@link processAsync} for the processing and it
 * always returns the Promise generated by that function.  If
 * the callback function is supplied in `done`, then it is called.
 *
 * @param text The HTML text to process
 * @param metadata Metadata object provided by the application and passed through to functions
 * @param mahabhutaFuncs The array of functions
 * @param done Optional callback function to call when processing is finished
 * @returns The Promise generated from processAsync
 */
async function process(text, metadata, mahabhutaFuncs, done) {
    let ret = processAsync(text, metadata, mahabhutaFuncs);
    if (done) {
        ret.then(html => { done(undefined, html); })
            .catch(err => { done(err); });
    }
    return ret;
}
exports.process = process;
/**
 * Process the text using functions supplied in the array mahabhutaFuncs.
 */
async function processAsync(text, metadata, mahabhutaFuncs) {
    if (!mahabhutaFuncs || mahabhutaFuncs.length < 0)
        mahabhutaFuncs = [];
    let cleanOrDirty = 'first-time';
    // console.log(`processAsync text at start ${text}`);
    // Allow a pre-parsed context to be passed in
    const $ = typeof text === 'function' ? text : parse(text);
    // console.log(`processAsync $ at start `, $.html());
    // const loops = [];
    do {
        // let startProcessing = new Date();
        let mhObj;
        if (Array.isArray(mahabhutaFuncs)) {
            // console.log(`ARRAY substitution`);
            mhObj = new MahafuncArray_2.MahafuncArray("master", {});
            mhObj.setMahafuncArray(mahabhutaFuncs);
        }
        else if (mahabhutaFuncs instanceof MahafuncArray_2.MahafuncArray) {
            // console.log(`MahafuncArray`);
            mhObj = mahabhutaFuncs;
        }
        else
            throw new Error(`Bad mahabhutaFuncs object supplied`);
        cleanOrDirty = 'clean';
        /* let results = */ await mhObj.process($, metadata, () => { cleanOrDirty = 'dirty'; });
        // results.forEach(result => { loops.push(mhObj.name +'  '+ result); });
        // console.log(`MAHABHUTA processAsync ${metadata.document.path} FINISH ${(new Date() - startProcessing) / 1000} seconds ${cleanOrDirty}`);
    } while (cleanOrDirty === 'dirty');
    // loops.forEach(l => { console.log(l); });
    return $.html();
}
exports.processAsync = processAsync;
/**
 * Process one function against the supplied text.
 *
 * @param text The text to process
 * @param metadata Metadata object provided by the application and passed through to functions
 * @param mahafunc A single function, or a {@link MahafuncArray}, to execute
 * @param done Optional callback function to call when processing is finished
 * @returns The Promise generated from processAsync
 */
async function process1(text, metadata, mahafunc, done) {
    return process(text, metadata, [mahafunc], done);
}
exports.process1 = process1;
/**
 * Construct a MahafuncArray
 * @param name The name for the array
 * @param config Configuration object
 * @param functions An optional list of functions to add
 * @returns A MahafuncArray
 */
function default_1(name, config, functions) {
    const array = new MahafuncArray_2.MahafuncArray(name, config);
    if (functions)
        array.addMahafunc(functions);
    return array;
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,