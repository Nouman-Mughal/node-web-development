"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Munger = void 0;
const Mahafunc_1 = require("./Mahafunc");
const util = __importStar(require("util"));
const index_1 = require("./index");
class Munger extends Mahafunc_1.Mahafunc {
    get elementName() {
        return ''; // This is a default
    }
    /**
     * For _Munger_ classes, the `process` function has access
     * to the entire HTML for the page.  Hence, it is passed
     * both `$` for the whole page, and `$element` matching
     * a specific element on the page.
     *
     * @param $
     * @param $element
     * @param metadata
     * @param setDirty
     * @param done
     */
    async process($, $element, metadata, setDirty, done) {
        throw new Error("The 'process' function must be overridden");
    }
    async processAll($, metadata, setDirty) {
        try {
            var elements = this.findElements($);
            if (elements.length <= 0)
                return;
            // Performance testing
            const _start = new Date();
            // console.log(`Munger ${this.array.name} ${this.elementName} found ${elements.length} elements`);
            for (let element of elements) {
                await this.process($, $(element), metadata, setDirty);
            }
            // Performance testing
            (0, index_1.logPerformance)(_start, `Munger ${this.array.name} ${this.elementName}`);
        }
        catch (e) {
            console.error(`Munger ${this.selector} Errored with ${util.inspect(e)}`);
            throw e;
        }
    }
}
exports.Munger = Munger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVuZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL011bmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EseUNBQXNDO0FBQ3RDLDJDQUE2QjtBQUM3QixtQ0FBd0Q7QUFFeEQsTUFBYSxNQUFPLFNBQVEsbUJBQVE7SUFDaEMsSUFBSSxXQUFXO1FBQ1gsT0FBTyxFQUFFLENBQUMsQ0FBRyxvQkFBb0I7SUFDckMsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFrQixFQUFFLElBQWU7UUFDcEUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBa0I7UUFDNUMsSUFBSTtZQUNBLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7Z0JBQUUsT0FBTztZQUNqQyxzQkFBc0I7WUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUMxQixrR0FBa0c7WUFDbEcsS0FBSyxJQUFJLE9BQU8sSUFBSSxRQUFRLEVBQUU7Z0JBQzFCLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN6RDtZQUNELHNCQUFzQjtZQUN0QixJQUFBLHNCQUFjLEVBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDM0U7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsUUFBUSxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekUsTUFBTSxDQUFDLENBQUM7U0FDWDtJQUNMLENBQUM7Q0FDSjtBQXRDRCx3QkFzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE1haGFmdW5jIH0gZnJvbSBcIi4vTWFoYWZ1bmNcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBsb2dQcm9jZXNzaW5nLCBsb2dQZXJmb3JtYW5jZSB9IGZyb20gJy4vaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgTXVuZ2VyIGV4dGVuZHMgTWFoYWZ1bmMge1xuICAgIGdldCBlbGVtZW50TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJyc7ICAgLy8gVGhpcyBpcyBhIGRlZmF1bHRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgX011bmdlcl8gY2xhc3NlcywgdGhlIGBwcm9jZXNzYCBmdW5jdGlvbiBoYXMgYWNjZXNzXG4gICAgICogdG8gdGhlIGVudGlyZSBIVE1MIGZvciB0aGUgcGFnZS4gIEhlbmNlLCBpdCBpcyBwYXNzZWRcbiAgICAgKiBib3RoIGAkYCBmb3IgdGhlIHdob2xlIHBhZ2UsIGFuZCBgJGVsZW1lbnRgIG1hdGNoaW5nXG4gICAgICogYSBzcGVjaWZpYyBlbGVtZW50IG9uIHRoZSBwYWdlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSAkIFxuICAgICAqIEBwYXJhbSAkZWxlbWVudCBcbiAgICAgKiBAcGFyYW0gbWV0YWRhdGEgXG4gICAgICogQHBhcmFtIHNldERpcnR5IFxuICAgICAqIEBwYXJhbSBkb25lIFxuICAgICAqL1xuICAgIGFzeW5jIHByb2Nlc3MoJCwgJGVsZW1lbnQsIG1ldGFkYXRhLCBzZXREaXJ0eTogRnVuY3Rpb24sIGRvbmU/OiBGdW5jdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ3Byb2Nlc3MnIGZ1bmN0aW9uIG11c3QgYmUgb3ZlcnJpZGRlblwiKVxuICAgIH1cblxuICAgIGFzeW5jIHByb2Nlc3NBbGwoJCwgbWV0YWRhdGEsIHNldERpcnR5OiBGdW5jdGlvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5maW5kRWxlbWVudHMoJCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoIDw9IDApIHJldHVybjtcbiAgICAgICAgICAgIC8vIFBlcmZvcm1hbmNlIHRlc3RpbmdcbiAgICAgICAgICAgIGNvbnN0IF9zdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgTXVuZ2VyICR7dGhpcy5hcnJheS5uYW1lfSAke3RoaXMuZWxlbWVudE5hbWV9IGZvdW5kICR7ZWxlbWVudHMubGVuZ3RofSBlbGVtZW50c2ApO1xuICAgICAgICAgICAgZm9yIChsZXQgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2VzcygkLCAkKGVsZW1lbnQpLCBtZXRhZGF0YSwgc2V0RGlydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGVyZm9ybWFuY2UgdGVzdGluZ1xuICAgICAgICAgICAgbG9nUGVyZm9ybWFuY2UoX3N0YXJ0LCBgTXVuZ2VyICR7dGhpcy5hcnJheS5uYW1lfSAke3RoaXMuZWxlbWVudE5hbWV9YCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE11bmdlciAke3RoaXMuc2VsZWN0b3J9IEVycm9yZWQgd2l0aCAke3V0aWwuaW5zcGVjdChlKX1gKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=