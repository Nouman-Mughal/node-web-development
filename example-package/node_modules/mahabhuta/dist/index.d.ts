/**
 * Copyright 2014-2019 David Herron
 *
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
import * as cheerio from 'cheerio';
export { Mahafunc } from './Mahafunc';
export { CustomElement } from './CustomElement';
export { ElementTweaker } from './ElementTweaker';
export { MahafuncArray, MahafuncType } from './MahafuncArray';
export { Munger } from './Munger';
export { PageProcessor } from './PageProcessor';
import { MahafuncArray, MahafuncType } from './MahafuncArray';
/**
 * Set the Cheerio configuration.
 * @param _configCheerio Object corresponding to Cheerio documentation
 * @see {@link https://www.npmjs.com/package/cheerio} for Cheerio documentation
 */
export declare function config(_configCheerio: any): void;
/**
 * Enable or disable "processing" tracing.  Controls whether `logProcessing` does anything.
 * @param _traceFlag
 */
export declare function setTraceProcessing(_traceFlag: boolean): void;
/**
 * Enable or disable "performance" tracing.
 * @param _traceFlag
 */
export declare function setTracePerformance(_traceFlag: boolean): void;
/**
 * Perform "processing" tracing, if enabled.
 * @param text
 * @returns
 */
export declare function logProcessing(text: string): void;
/**
 * Perform "performance" tracing, if enabled.
 * @param start
 * @param text
 * @returns
 */
export declare function logPerformance(start: Date, text: string): void;
/**
 * Parse the supplied text using Cheerio.   If a Cheerio Config
 * has been set, it will be used.
 *
 * @param text The HTML text to parse
 * @returns The object returned by Cheerio
 */
export declare function parse(text: string): cheerio.CheerioAPI;
/**
 * Process an array of functions against HTML text.  This
 * function supports both Promise/async and Callback execution.
 * It uses {@link processAsync} for the processing and it
 * always returns the Promise generated by that function.  If
 * the callback function is supplied in `done`, then it is called.
 *
 * @param text The HTML text to process
 * @param metadata Metadata object provided by the application and passed through to functions
 * @param mahabhutaFuncs The array of functions
 * @param done Optional callback function to call when processing is finished
 * @returns The Promise generated from processAsync
 */
export declare function process(text: string, metadata: any, mahabhutaFuncs: MahafuncArray | Array<MahafuncType>, done?: Function): Promise<string>;
/**
 * Process the text using functions supplied in the array mahabhutaFuncs.
 */
export declare function processAsync(text: string, metadata: Object, mahabhutaFuncs: MahafuncArray | Array<MahafuncType>): Promise<string>;
/**
 * Process one function against the supplied text.
 *
 * @param text The text to process
 * @param metadata Metadata object provided by the application and passed through to functions
 * @param mahafunc A single function, or a {@link MahafuncArray}, to execute
 * @param done Optional callback function to call when processing is finished
 * @returns The Promise generated from processAsync
 */
export declare function process1(text: string, metadata: any, mahafunc: MahafuncType, done?: Function): Promise<string>;
/**
 * Construct a MahafuncArray
 * @param name The name for the array
 * @param config Configuration object
 * @param functions An optional list of functions to add
 * @returns A MahafuncArray
 */
export default function (name: string, config: Object, functions?: MahafuncType): MahafuncArray;
//# sourceMappingURL=index.d.ts.map