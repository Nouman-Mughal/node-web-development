"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const mahabhuta = __importStar(require("./index.js"));
const fs_1 = require("fs");
const yaml_1 = __importDefault(require("yaml"));
// mahabhuta process file.html -o file2.html -m mahafuncs.js -m mahafuncs2.js -m mahafuncs3.js --options options.yaml --metadata metadata.yaml
const packageJSON = require('../package.json');
process.title = 'mahabhuta';
commander_1.program.version(packageJSON.version, '-v, --version', 'output the current version');
// DEFAULT CHEERIO CONFIG
// Cheerio Config
// Trace Processing
// Trace Performance
// metadata
commander_1.program
    .command('process <inputFN>')
    .description('Process an input file using supplied mahabhuta arrays')
    .option('-o, --output <outputFN>', 'Specify output file name')
    .option('-m, --module <mahafuncFN...>', 'JavaScript file (or files) containing a defined MahafuncArray')
    .option('-c, --config <cheerioConfig>', 'YAML file containing Cheerio configuration')
    .option('--trace-performance', 'Trace performance data')
    .option('--trace-processing', 'Trace processing')
    .option('--metadata <metadataFN>', 'YAML file containing data')
    .option('--options <optionsFN', 'YAML file containing options for mahabhuta arrays')
    .option('--partials', 'Enable the <partial> MahaFuncs')
    .option('--partials-dir <dirFN...>', 'Directory name for partial templates')
    .action(async (inputFN, cmdObj) => {
    try {
        // console.log(inputFN);
        // console.log(cmdObj);
        if (!inputFN)
            throw new Error('No input file specified');
        if (cmdObj.config) {
            const txt = await fs_1.promises.readFile(cmdObj.config, 'utf8');
            // console.log(`Read config ${cmdObj.config}`, txt);
            const cheerioConfig = yaml_1.default.parse(txt);
            // For cheerio 1.0.0-rc.10 we need to use this setting.
            // If the configuration has set this, we must not
            // override their setting.  But, generally, for correct
            // operation and handling of Mahabhuta tags, we need
            // this setting to be <code>true</code>
            if (!('_useHtmlParser2' in cheerioConfig)) {
                cheerioConfig._useHtmlParser2 = true;
            }
            // console.log(`Setting cheerioConfig `, cheerioConfig);
            mahabhuta.config(cheerioConfig);
        }
        // console.log('After config');
        if (cmdObj.tracePerformance)
            mahabhuta.setTracePerformance(true);
        if (cmdObj.traceProcessing)
            mahabhuta.setTraceProcessing(true);
        let metadata = {};
        if (cmdObj.metadata) {
            const txt = await fs_1.promises.readFile(cmdObj.metadata, 'utf8');
            // console.log(`Read metadata ${cmdObj.metadata}`, txt);
            metadata = yaml_1.default.parse(txt);
        }
        // console.log('After metadata');
        let mhOptions = {};
        if (cmdObj.options) {
            const txt = await fs_1.promises.readFile(cmdObj.options, 'utf8');
            // console.log(`Read options ${cmdObj.options}`, txt);
            mhOptions = yaml_1.default.parse(txt);
        }
        // console.log('After options');
        const inputFile = await fs_1.promises.readFile(inputFN, 'utf8');
        // console.log(`input file ${inputFile}`, inputFile);
        const mahafuncs = [];
        for (const arrayFN of cmdObj.module) {
            const arrayModule = require(arrayFN);
            // console.log(`MahafuncArray ${arrayFN}`);
            if (!arrayModule.mahabhutaArray) {
                throw new Error(`No mahabhutaArray function in ${arrayFN}`);
            }
            mahafuncs.push(arrayModule.mahabhutaArray(mhOptions));
        }
        let partialsModule;
        if (cmdObj.partials) {
            partialsModule = require('../maha/partial.js');
            // console.log(partialsModule);
            if (!partialsModule.configuration.partialDirs) {
                partialsModule.configuration.partialDirs = [];
            }
            if (cmdObj.partialsDir) {
                for (const dirFN of cmdObj.partialsDir) {
                    partialsModule.configuration.partialDirs.push(dirFN);
                }
            }
            mahafuncs.push(partialsModule.mahabhutaArray(mhOptions));
        }
        const output = await mahabhuta.processAsync(inputFile, metadata, mahafuncs);
        if (cmdObj.output) {
            await fs_1.promises.writeFile(cmdObj.output, output, 'utf8');
        }
        else {
            // console.log('////////////////////////// OUTPUT');
            console.log(output);
            // console.log('\\\\\\\\\\\\\\\\\\\\\\\\\\ OUTPUT');
        }
    }
    catch (e) {
        console.error(`process command ERRORED ${e.stack}`);
    }
});
commander_1.program.parse();
//# sourceMappingURL=data:application/json;base64,